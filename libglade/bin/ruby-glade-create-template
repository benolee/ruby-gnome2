#!/usr/bin/env ruby
#
# ruby-glade-create-template
#
# Create a ruby-glade template .rb file from a .glade file.
#
# Usage: ruby ruby-glade-create-template.rb yourgladefile.glade > file.rb
#
# $Id: ruby-glade-create-template,v 1.8 2004/07/11 15:09:28 mutoh Exp $
#
# Copyright (c) 2002-2004 Masao Mutoh <mutoh@highway.ne.jp>
#

require 'libglade2'

LG_VERSION = %Q[$Revision: 1.8 $].scan(/\d/).join(".")

path = ARGV[0]

#
# Support GNOME ?
#
type_gnome = false
IO.readlines(path).each do |line|
  if /<requires lib\=\"gnome\"\/>/ =~ line
    type_gnome = true
    begin
      require 'gnome2'
    rescue LoadError
      puts "The .glade requires Ruby/GNOME2, but it is not available on your system."
      exit 1
    end
  end
end

unless ARGV.size == 1
  puts "ruby-glade-create-template #{LG_VERSION}"
  puts "\nUsage: ruby ruby-glade-create-template.rb yourgladefile.glade > file.rb\n\n"
  exit 1
end

#
# Analyse .glade file.
#
filename = File.basename(path, ".*")
classname = filename.split(/[_-]/).collect{|item| item.capitalize}.join("")

if type_gnome
  Gnome::Program.new("ruby-glade-create-template", LG_VERSION)
else
  Gtk.init
end

GladeXML.set_custom_widget_handler(false)
glade = GladeXML.new(path)
signals = []
glade.signal_autoconnect_full{|source, target, signal_name, handler, data, after|
  signals << [source.class.signal(signal_name), glade.canonical_handler(handler)]
}

#
# Print template.
#
# Header part: Initialize method.
puts <<HEADER
#!/usr/bin/env ruby
require 'libglade2'
HEADER

puts <<INITIALIZE
class #{classname}
  def initialize(path_or_data, root = nil, domain = nil, localedir = nil, flag = GladeXML::FILE)
    @glade = GladeXML.new(path_or_data, root, domain, localedir, flag) {|handler| method(handler)}
  end
INITIALIZE

# Handler methods.
if signals.size > 0
  signals.each do |signal, handler|
    args = "widget"
    (0...signal.param_types.size).each do |i|
      args << ", arg#{i}"
    end
    puts "  def #{handler}(#{args})"
    puts "    puts \"#{handler}() is not implemented yet.\""
    puts "  end"
  end
end

puts "end\n\n"

puts <<FOOTER_CONST
if __FILE__ == $0
  # Set values as your own application. 
  PROG_PATH = "#{path}"
  PROG_NAME = "YOUR_APPLICATION_NAME"
FOOTER_CONST
if type_gnome
puts <<FOOTER_GNOME
  PROG_VERSION = "YOUR_APPLICATION_VERSION"
  Gnome::Program.new(PROG_NAME, PROG_VERSION)
FOOTER_GNOME
else
  puts "  Gtk.init"
end
puts <<FOOTER
  #{classname}.new(PROG_PATH, nil, PROG_NAME)
  Gtk.main
end
FOOTER

if glade.custom_creation_methods.size > 0
  puts "#You may need to implement some custom creation methods which return new widget."
  glade.custom_creation_methods.each do |v|
    puts "#" + v
  end
end

