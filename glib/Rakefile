# -*- ruby -*-

require 'find'
require 'open-uri'
require 'rubygems'
require 'rake/extensiontask'

task :default => :build

def version
  @version ||= ENV["VERSION"] || guess_version
end

def guess_version
  versions = {}
  File.open("ext/glib2/rbglib.h") do |rbglib_h|
    rbglib_h.each_line do |line|
      if /#define\s+RBGLIB_([A-Z]+)_VERSION\s+(\d+)/ =~ line
        versions[$1.downcase] = $2.to_i
      end
    end
  end
  ["major", "minor", "micro"].collect {|type| versions[type]}.compact.join(".")
end

package_name = "glib2"

spec = Gem::Specification.new do |s|
  s.name = package_name
  s.summary = "Ruby/GLib2 is a Ruby binding of GLib-2.x."
  s.description = "Ruby/GLib2 is a Ruby binding of GLib-2.x."
  s.author = "The Ruby-GNOME2 Proejct Team"
  s.email = "ruby-gnome2-devel-en@lists.sourceforge.net"
  s.homepage = "http://ruby-gnome2.sourceforge.jp/"
  s.version = version
  s.platform = Gem::Platform::RUBY
  s.extensions = FileList["ext/#{package_name}/extconf.rb"]
  s.require_paths = ["lib"]
  s.files = FileList["ChangeLog", "README", "Rakefile", "extconf.rb",
                     "lib/*.rb", "{ext,sample,test,test-unit}/**/*"]
end

Rake::GemPackageTask.new(spec) do |pkg|
end

Rake::ExtensionTask.new(package_name, spec) do |ext|
  ext.cross_compile = true
  ext.cross_compiling do |spec|
    if /mingw|mswin/ =~ spec.platform.to_s
      win32_dir = File.join("vendor", "local")
      win32_files = []
      Find.find(win32_dir) do |file|
        win32_files << file
      end
      spec.files += win32_files
    end
  end
end

namespace :win32 do
  desc "download Windows binaries"
  task :download do
    require 'mechanize'

    agent = Mechanize.new
    base = "http://ftp.gnome.org/pub/gnome/binaries/win32"
    packages = ["glib"]
    packages.each do |package|
      version_page = agent.get("#{base}/#{package}")
      latest_version_link = version_page.links.sort_by do |link|
        if /\A(\d+\.\d+)\/\z/ =~ link.href
          $1.split(/\./).collect {|component| component.to_i}
        else
          [-1]
        end
      end.last
      latest_version_page = latest_version_link.click
      latest_version = latest_version_page.links.collect do |link|
        if /_([\d\.\-]+)_win32\.zip\z/ =~ link.href
          version = $1
          [version.split(/[\.\-]/).collect {|component| component.to_i}, version]
        else
          [[-1], nil]
        end
      end.sort_by do |normalized_version, version|
        normalized_version
      end.last[1]
      latest_version_page.links.each do |link|
        if /_#{Regexp.escape(latest_version)}_win32\.zip\z/ =~ link.href
          zip = link.click
          mkdir_p("vendor/local")
          Dir.chdir("vendor/local") do
            open(zip.filename, "wb") do |file|
              file.print(zip.body)
            end
            sh("unzip", zip.filename)
          end
        end
      end
    end

    dependencies_page = agent.get("#{base}/dependencies/")
    dependencies = ["gettext-runtime"]
    dependencies.each do |dependency|
      latest_version = dependencies_page.links.collect do |link|
        if /\A#{Regexp.escape(dependency)}_([\d\.\-]+)_win32\.zip\z/ =~ link.href
          version = $1
          [version.split(/[\.\-]/).collect {|component| component.to_i}, version]
        else
          [[-1], nil]
        end
      end.sort_by do |normalized_version, version|
        normalized_version
      end.last[1]
      dependencies_page.links.each do |link|
        if /\A#{Regexp.escape(dependency)}(?:-dev)?_#{Regexp.escape(latest_version)}_win32.zip/ =~ link.href
          zip = link.click
          mkdir_p("vendor/local")
          Dir.chdir("vendor/local") do
            open(zip.filename, "wb") do |file|
              file.print(zip.body)
            end
            sh("unzip", zip.filename)
          end
        end
      end
    end
  end
end
